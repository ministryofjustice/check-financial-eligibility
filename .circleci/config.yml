version: 2.0

references:
  deploy_container_config: &deploy_container_config
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key

  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.0.2
        bundle install --path=vendor/bundle --jobs=4 && bundle clean

  build_container_config: &build_container_config
    docker:
    - image: circleci/ruby:2.5.3-node-browsers
      environment:
        - RAILS_ENV=test
        - PGHOST=localhost
        - PGUSER=user
    - image: postgres:10.5
      environment:
        - POSTGRES_USER=user
        - POSTGRES_DB=check_financial_eligibility_test

  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .


  setup_aws_cli: &setup_aws_cli
    run:
      name: Setup aws cli
      command: |
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --no-include-email)

  setup_uat_kubectl: &setup_uat_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        setup-kube-auth
        kubectl config use-context uat

  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:latest"
          docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:latest"
        fi

jobs:
  build_and_test:
    <<: *build_container_config
    steps:
    - checkout
    - *install_gems
    - setup_remote_docker:
        docker_layer_caching: true
    - run: sudo apt-get update
    - restore_cache:
        keys:
          - check-financial-eligibility-{{ checksum "Gemfile.lock" }}
          - check-financial-eligibility
    - run:
        name: Bundle Install
        command: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      # Store bundle cache
    - save_cache:
        key: check-financial-eligibility-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle
    - run: sudo apt install -y postgresql-client || true
    - run:
        name: Database Setup
        command: |
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> about to do rake db:setup <<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          bundle exec rake db:create db:schema:load
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> about to do rake db:migrate <<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          bundle exec rake db:migrate
    - run:
        name: Install NPM packages
        command: npm install
    - run:
        name: Run Tests
        command: bundle exec rake
    - *build_docker_image
    - *setup_aws_cli
    - *push_to_ecr

  deploy_uat:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup UAT
        command: |
          $(aws ecr get-login --no-include-email)
          setup-kube-auth
          kubectl config use-context uat
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to UAT
        command: |
          IMG_REPO="$ECR_ENDPOINT/laa-apply-for-legal-aid/check-financial-eligibility-service"
          RELEASE_NAME=$(echo $CIRCLE_BRANCH | sed 's:^\w*\/::' | tr -s ' _/[]().' '-' | cut -c1-30 | sed 's/-$//')
          RELEASE_HOST="$RELEASE_NAME-check-financial-uat.apps.live-1.cloud-platform.service.justice.gov.uk"

          echo "Deploying CIRCLE_SHA1: $CIRCLE_SHA1 under release name: '$RELEASE_NAME'..."

          helm upgrade $RELEASE_NAME ./deploy/helm/. \
                        --install --force --wait \
                        --tiller-namespace=${KUBE_ENV_UAT_NAMESPACE} \
                        --namespace=${KUBE_ENV_UAT_NAMESPACE} \
                        --values ./deploy/helm/values-uat.yaml \
                        --set deploy.host="$RELEASE_HOST" \
                        --set image.repository="$IMG_REPO" \
                        --set image.tag="$CIRCLE_SHA1" \
                        --set ingress.hosts="{$RELEASE_HOST}"

  deploy_staging:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup staging
        command: |
          $(aws ecr get-login --no-include-email)
          setup-kube-auth
          kubectl config use-context staging
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to staging
        command: |

          helm upgrade check-financial-eligibility ./deploy/helm/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                        --values ./deploy/helm/values-staging.yaml \
                        --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/check-financial-eligibility-service" \
                        --set image.tag="${CIRCLE_SHA1}"

  deploy_production:
    <<: *deploy_container_config
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Kubectl deployment setup production
        command: |
          $(aws ecr get-login --no-include-email)
          setup-kube-auth
          kubectl config use-context production
    - *decrypt_secrets
    - deploy:
        name: Helm deployment to production
        command: |

          helm upgrade check-financial-eligibility ./deploy/helm/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./deploy/helm/values-production.yaml \
                        --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/check-financial-eligibility-service" \
                        --set image.tag="${CIRCLE_SHA1}"

  clean_up_ecr:
    <<: *build_container_config
    steps:
    - checkout
    - run: sudo apt-get update
    - setup_remote_docker
    - *setup_aws_cli
    - run:
        name: Delete old images from ecr repo
        command: |
          ./bin/clean_up_ecr

  delete_uat:
    <<: *deploy_container_config
    steps:
      - checkout
      - setup_remote_docker
      - *setup_uat_kubectl
      - run:
          name: Delete UAT release
          command: |
            ./bin/delete_uat_release

workflows:
  version: 2
  build_and_deploy:
    jobs:
    - build_and_test
    - hold_uat:
        type: approval
        requires:
        - build_and_test
    - deploy_uat:
        requires:
        - hold_uat
    - hold_staging:
        type: approval
        requires:
        - build_and_test
        filters:
          branches:
            only: master
    - deploy_staging:
        requires:
        - hold_staging
        filters:
          branches:
            only: master
    - hold_production:
        type: approval
        requires:
        - deploy_staging
        filters:
          branches:
            only: master
    - deploy_production:
        requires:
        - hold_production
        filters:
          branches:
            only: master
  nightly:
    triggers:
    - schedule:
        cron: "0 3 * * *"
        filters:
          branches:
            only:
            - master
    jobs:
    - clean_up_ecr
    - deploy_staging
